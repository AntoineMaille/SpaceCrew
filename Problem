public ArrayList<Vaisseau> createFlotte(){
		ArrayList<Vaisseau> flotte = new ArrayList<Vaisseau>();
		int xCroiseur, yCroiseur, xChasseur, yChasseur, xDestroyer, yDestroyer, xEclaireur, yEclaireur;
		System.out.println(this.numero);
		switch(this.numero) {
		case 1: xCroiseur = 0; yCroiseur = 2;
		xChasseur = 2; yChasseur = 0; 
		xDestroyer = 2; yDestroyer = 1; 
		xEclaireur = 1; yEclaireur = 2;
		break;
		case 2: xCroiseur = Map.getLength() - 1; yCroiseur = Map.getLength() - 3;
		xChasseur = Map.getLength() - 3; yChasseur = Map.getLength() - 1; 
		xDestroyer = Map.getLength() - 3; yDestroyer = Map.getLength() - 2; 
		xEclaireur = Map.getLength() - 2; yEclaireur = Map.getLength() - 3;
		break;
		case 3: xCroiseur = 0; yCroiseur = Map.getLength() - 3;
		xChasseur = 1; yChasseur = Map.getLength() - 3; 
		xDestroyer = 2; yDestroyer = Map.getLength() - 1; 
		xEclaireur = 2; yEclaireur = Map.getLength() - 2;
		break;
		case 4: xCroiseur = Map.getLength() - 3; yCroiseur = 0;
		xChasseur = Map.getLength() - 3; yChasseur = 1; 
		xDestroyer = Map.getLength() - 1; yDestroyer = 2; 
		xEclaireur = Map.getLength() - 2; yEclaireur = 2;
		break;
		default : System.out.println("default");
		xCroiseur = 0; yCroiseur = 0;
		xChasseur = 0; yChasseur = 0; 
		xDestroyer = 0; yDestroyer = 0; 
		xEclaireur = 0; yEclaireur = 0;
		break;
		}
		flotte.add((new Vaisseau(VaisseauType.CROISEUR,xCroiseur,yCroiseur)));
		flotte.add((new Vaisseau(VaisseauType.CHASSEUR,xChasseur,yChasseur)));
		flotte.add((new Vaisseau(VaisseauType.DESTROYER,xDestroyer,yDestroyer)));
		flotte.add((new Vaisseau(VaisseauType.ECLAIREUR,xEclaireur,yEclaireur)));
		return flotte;
	}



	package crew;

import java.util.ArrayList;
import java.util.Scanner;

public class Map {
	private ArrayList<Joueur> joueursList;
	private ArrayList<Planets> planetesRandom;
	private static final int length = 20;
	public static Entities [][] map = new Entities[length][length];
	private int compteurPlanete = -1;
	private static Scanner scan = new Scanner(System.in);



	public static Entities[][] getMap() {
		return map;
	}


	public static int getLength() {
		return length;
	}


	public Map(ArrayList<Joueur> joueurs) {
		this.joueursList = new ArrayList<Joueur>();
		planetesRandom = new ArrayList<Planets>();
		for (Joueur joueur : joueurs) {
			this.joueursList.add(joueur);
			Map.addEntities(joueur.getPlanete());
			for (Vaisseau vaisseau : joueur.getFlotte()) {
				Map.addEntities(vaisseau);
			}
		}
		for (int i = 0; i < (Map.length); i++) {
			for (int j = 0; j < (Map.length); j++) {
				if((((int) (Math.random() * 15))  >= 14) && (!((i > -1 && i < 4)&& (j > -1 && j < 4))) && (!((i > Map.length - 5 && i < Map.length) && ( j > Map.length - 5 && j < Map.length))) && (!((i > (Map.length/2 - 3) && i < (Map.length/2 + 2)) && ( j > (Map.length/2 - 3) && j < (Map.length/2 + 2))))) {
					this.planetesRandom.add(new PlaneteRandom(i ,j));
					compteurPlanete++;
					Map.addEntities(this.planetesRandom.get(compteurPlanete));
				}
			}
		}
	}


	public String toString() {
		StringBuilder res = new StringBuilder();
		for (int ligne = 0; ligne < Map.length ; ligne++) {
			res.append('\n');
			for (int separation = 0; separation < map.length; separation++) {
				res.append(" ---");
			}
			res.append('\n');
			for (int colonne = 0; colonne < Map.length; colonne++) {

				if( map[ligne] [colonne] instanceof Planets || map[ligne][colonne] instanceof Vaisseau)
					res.append("| " + map[ligne][colonne].toString() + " ");
				else {
					res.append("|   ");
				}
			}
			res.append("|");
		}
		return res.toString();
	}

	public static Entities getCase(Coordinates c) {
		return Map.map [c.getX()][c.getY()];
	}

	public static void addEntities(Entities e) {
		Map.map [e.getPosition().getX()][e.getPosition().getY()] = e;
	}

	public static void deleteEntities(Entities e) {
		Map.map [e.getPosition().getX()][e.getPosition().getY()] = null;
	}



	public static ArrayList<Joueur> creationJoueur() {
		ArrayList<Joueur> joueurs = new ArrayList<>();
		String strEquipe;
		int nbEquipe;
		System.out.println("Combien voulez-vous d'Ã©quipes ? : ");
		strEquipe = scan.nextLine();
		nbEquipe = Integer.parseInt(strEquipe);
		for (int nbJoueurs = 0; nbJoueurs < nbEquipe; nbJoueurs++) {
			joueurs.add(new Joueur(nbJoueurs + 1, "toto", new PlaneteJoueur(PlaneteInitEnum.values() [nbJoueurs])));
		}
		return joueurs;
	}


	public static void main(String[] args) {
		Map map = new Map(creationJoueur());
		System.out.println(map);
		for (int i =0; i < 4; i++) {
			while(map.joueursList.get(0).getFlotte().get(i).getMovementPointLeft() > 0) {
				Direction d;
				String test = scan.nextLine();
				if (test.equalsIgnoreCase("n")) {
					d = Direction.NORD;
					if(Entiti(map.joueursList.get(0).getFlotte().get(i).getPosition(), d)) {
						System.out.println("Marche plus!");
					} else {
						map.joueursList.get(0).getFlotte().get(i).move(d);
						System.out.println(map);
					}
				}else if (test.equalsIgnoreCase("s")) {
					d = Direction.SUD;
					if(Entiti(map.joueursList.get(0).getFlotte().get(i).getPosition(), d)) {
						System.out.println("Marche plus!");
					} else {
						map.joueursList.get(0).getFlotte().get(i).move(d);
						System.out.println(map);
					}
				}else if (test.equalsIgnoreCase("e")) {
					d = Direction.EST;
					if(Entiti(map.joueursList.get(0).getFlotte().get(i).getPosition(), d)) {
						System.out.println("Marche plus!");
					} else {
						map.joueursList.get(0).getFlotte().get(i).move(d);
						System.out.println(map);
					}
				}else if (test.equalsIgnoreCase("o")) {
					d = Direction.OUEST;
					if(Entiti(map.joueursList.get(0).getFlotte().get(i).getPosition(), d)) {
						System.out.println("Marche plus!");
					} else {
						map.joueursList.get(0).getFlotte().get(i).move(d);
						System.out.println(map);
					}
				}
			}
		}
	}
		
	public static boolean Entiti(Coordinates c, Direction d) {
		int abs = 0;
		int ord = 0;
		if (d == Direction.NORD) {
			ord = -1;
		} else if (d == Direction.SUD) {
			ord = 1;
		} else if (d == Direction.OUEST) {
			abs = -1;
		} else if (d == Direction.EST){
			abs = 1;
		}
		if (c.getX()+ord < 0 || c.getX() + ord > 19 || c.getY()+abs < 0 || c.getY()+abs >19) {
			System.out.println("Bordure de map");
			return false;
		}
		if ( map[c.getX()+ord][c.getY()+abs] != null) {
			return true;
		}
		return false;
	}
